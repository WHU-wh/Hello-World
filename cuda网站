https://www.cnblogs.com/ahfuzhang/p/10852659.html    GPUMat详解，其中有step详解
https://www.cnblogs.com/carl2380/p/7122698.html   cuda从入门到精通
https://blog.csdn.net/dcrmg/article/details/54959306   cuda原子操作
https://blog.csdn.net/q583956932/article/details/78826987   cuda原子操作介绍，师兄看的寄存器那个
https://blog.csdn.net/wang010366/article/details/52961242  cuda详细介绍大全
字符转转整形：https://zhidao.baidu.com/question/576359612.html
             atoi方法（网上说遇到空格就不行）：https://blog.csdn.net/zhaoweiping123/article/details/80529696 
             两者互转：https://www.cnblogs.com/A-Little-Nut/p/8056421.html

纹理内存和常量内存
https://blog.csdn.net/linj_m/article/details/41522573
https://blog.csdn.net/i_chaoren/article/details/78061379  好，有官方实例代码，还有cudaArray和线性显存绑定问纹理内存的区别。

纹理介绍 ——————————————————————————————————————————————
     纹理存储器（texture memory）是一种只读存储器，由GPU用于纹理渲染的的图形专用单元发展而来，因此也提供了一些特殊功能。

     纹理缓存的优势：纹理缓存具备硬件插值特性，可以实现最近邻插值和线性插值。纹理缓存针对二维空间的局部性访问进行了优化，所以通过纹理缓存访问二维矩阵的
邻域会获得加速。不需要满足全局内存的合并访问条件。

     纹理可以是一段连续的设备内存，也可以是一个CUDA数组（cudaMalloArray可以创建cuda数组）。但是CUDA数组对局部寻址有优化，称为“块线性”，原理是将邻域
元素缓存在同一条cache线上，这将加快邻域内的寻址，但是对于设备内存，并没有“块线性”。所以，选择采用CUDA数组，还是设备内存，需要根据实际情况决定，将数据
copy至CUDA数组是很耗时的。

     纹理的创建通过texture object或者texture reference，注意只有计算能力3.0以上的设备支持texture object，本文仅介绍texture reference。
     
使用3步走：——————————————————————————————————————————————
     1、声明全局纹理引用（也叫纹理参考）
     2、将显存绑定到纹理引用。cudaBindTexture（）或cudaBindTextureToArray（），两者不一样，见上面cuda数组的好处。
     3、从纹理参考中取值
     4、解绑
    
一步 纹理参考系的声明——————————————————————————————————————————————
     texture<DataType, Type, ReadMode> texRef;
     其中：
     -DataType指定纹理获取时的返回的数据类型，DataType限制为基本的整形和单精度浮点型，或向量类型（具体可查手册）。
     -Type指定纹理参考的类型，且等于cudaTextureType1D（一维纹理）,cudaTextureType2D（二维纹理）或cudaTextureType3D（三维纹理），
          或者cudaTextureType1Dlayered（一维层次纹理）或cudaTextureType2Dlayered（二维层次纹理），Type是可选的，默认为cudaTextureType1D；
     -ReadMode等于cudaReadModeNormalizedFloat或cudaReadModeElementType；如果它是cudaReadModeNormalizedFloat且DataType是16位或者8位整形，
          实际返回值是浮点类型，对于无符号整型，整形全范围被映射到[0.0，1.0]，对于有符号整型，映射成[-1.0，1.0]；例如，无符号八位值为0xff的纹理
          元素映射为1；如果ReadMode是cudaReadModeElementType，不会进行转换；ReadMode是个可选参数，默认为cudaReadModeElementType。

二步 纹理绑定 ——————————————————————————————————————————————
     channelDesc描述获取纹理时返回值的格式；channelDesc类型定义如下：
      struct cudaChannelFormatDesc{
        int x;     //通道0的数据位深度（比特数）
        int y;     //通道1的数据位深度
        int z;     //通道2的数据位深度
        int w;
        enum cudaChannelFormatKind f;     //数据类型
      };

     其中x、y、z和w 是返回值各组件的位数，而f为：
      -cudaChannelFormatKindSigned，如果这些组件是有符号整型；

      -cudaChannelFormatKindUnsigned，如果这些组件是无符号整型；

      -cudaChannelFormatKindFloat，如果这些组件是浮点类型。

     在内核中使用纹理参考从纹理存储器中读取数据之前，对于线性存储器必须使用 cudaBindTexture() 或cudaBindTexture2D()，
     对于CUDA数组，必须使用cudaBindTextureToArray()，将纹理参考绑定到纹理。
     cudaUnbindTexture()用于解绑定纹理参考。
     
三步 纹理拾取 ——————————————————————————————————————————————
     对于一维、二维和三维的CUDA数组绑定的纹理，分别使用tex1D( )或tex1Dfetch()、tex2D()和tex3D()函数访问，并且使用浮点型纹理坐标。
在算法实现中，这相当于是线性插值。
     最简单的方法就是：使用tex1Dfetch() ，因为：仅支持整数地址；没有提供额外的过滤或地址模式。
     方法tex1D(), tex2D(), 和tex3D()的使用更为复杂，因为对纹理坐标的解释，在纹理拾取时会有怎样的运算，以及纹理拾取所传递的返回值都通过设定
纹理参照系的易变（运行时间）和不变（编译时间）属性得以控制。其参数如下：
      不变参数（编译时间）
      类型：当拾取时，返回类型
      基础整数和浮子式
      CUDA 1-, 2-, 4-元素向量
      维度：:
      现在是Currently 1D, 2D, 或3D
      读取模式：:
      cudaReadModeElementType
      cudaReadModeNormalizedFloat (对8- 或16-字节整数有效)
      返回[-1,1] （以签字）, [0,1] 未签字
      易变参数 (运行时间，仅适用于数组纹理和音高线性内存)
      规格化：:
      非零 = 地址范围[0, 1]
      过滤模式
      cudaFilterModePoint
      cudaFilterModeLinear
      地址模式
      cudaAddressModeClamp
      cudaAddressModeWrap
      如需了解更多信息，请参阅CUDA Programming Guide.（CUDA编程指南）
      在缺省状态下，在[0, N) 范围内（N是纹理大小，采用与坐标一致的维度），使用浮点坐标引用纹理。确定规格化纹理坐标会被使用，这意味着所有引用都在[0,1)范围内。
      Wrap模式确定界外地址会发生什么情况：
      Wrap: 界外座标被wrap(通过同余算法)
     
     
四步 纹理解绑 ——————————————————————————————————————————————
     cudaUnbindTexture()用于解绑定纹理参考。
   
   
官方实例代码：——————————————————————————————————————————————    
      // 2D float texture  必须声明为全局
      texture<float, cudaTextureType2D, cudaReadModeElementType> texRef;
      // Simple transformation kernel
      __global__ void transformKernel(float* output,int width, int height,float theta)
      {
          // Calculate normalized texture coordinates
          unsigned int x = blockIdx.x * blockDim.x + threadIdx.x;
          unsigned int y = blockIdx.y * blockDim.y + threadIdx.y;
          float u = x / (float)width;
          float v = y / (float)height;
          // Transform coordinates
          u -= 0.5f;
          v -= 0.5f;
          float tu = u * cosf(theta) - v * sinf(theta) + 0.5f;
          float tv = v * cosf(theta) + u * sinf(theta) + 0.5f;
          // Read from texture and write to global memory
          output[y * width + x] = tex2D(texRef, tu, tv);
      }

      // Host code
      int main()
      {
          // Allocate CUDA array in device memory
          cudaChannelFormatDesc channelDesc = cudaCreateChannelDesc(32, 0, 0, 0,cudaChannelFormatKindFloat);
          cudaArray* cuArray;
          cudaMallocArray(&cuArray, &channelDesc, width, height);
           // Copy to device memory some data located at address h_data
          // in host memory
          cudaMemcpyToArray(cuArray, 0, 0, h_data, size,cudaMemcpyHostToDevice);
          // Set texture reference parameters
          texRef.addressMode[0] = cudaAddressModeWrap;
          texRef.addressMode[1] = cudaAddressModeWrap;
          texRef.filterMode = cudaFilterModeLinear;
          texRef.normalized = true;
          // Bind the array to the texture reference
          cudaBindTextureToArray(texRef, cuArray, channelDesc);
          // Allocate result of transformation in device memory
          float* output;
          cudaMalloc(&output, width * height * sizeof(float));
          // Invoke kernel
          dim3 dimBlock(16, 16);
          dim3 dimGrid((width + dimBlock.x - 1) / dimBlock.x,(height + dimBlock.y - 1) / dimBlock.y);
           transformKernel<<<dimGrid, dimBlock>>>(output, width, height,angle);
          // Free device memory
          cudaFreeArray(cuArray);
          cudaFree(output);
          return 0;
      }


