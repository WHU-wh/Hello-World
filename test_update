9.      变量类型限定符
变量类型限定符用于指明变量存储在设备端的哪一类存储器上。
(1)、__device__：声明的变量存在于设备上。当__device__变量限定符不与其他限定符连用时，这个变量将：位于全局存储器空间中；与应用程序具有相同的生命周期；可以通过运行时库从主机端访问，设备端的所有线程也可访问。
(2)、__constant__：使用__constant__限定符，或者与__device__限定符连用，这样声明的变量：存在于常数存储器空间；与应用程序具有相同的生命周期；可以通过运行时库从主机端访问，设备端的所有线程也可访问。
(3)、__shared__：使用__shared__限定符，或者与__device__限定符连用，此时声明的变量：位于block中的共享存储器空间中；与block具有相同的生命周期；仅可通过block内的所有线程访问。
(4)、volatile：存在于全局或者共享存储器中的变量通过volatile关键字声明为敏感变量，编译器认为其他线程可能随时会修改变量的值，因此每次对该变量的引用都会被编译成一次真实的内存读指令。
以上限定符不能用于struct与union成员、在主机端执行的函数的形参以及局部变量。
__shared__和__constant__变量默认为是静态存储。
__device__、__shared__和__constant__不能用extern关键字声明为外部变量。在__shared__前可以加extern关键字，但表示的是变量大小由执行参数确定。
__device__和__constant__变量只能在文件作用域中声明，不能再函数体内声明。
__constant__变量不能从device中赋值，只能从host中通过host运行时函数赋值。
__shared__变量在声明时不能初始化。
在设备代码中(__global__或者__device__函数中)，如果一个变量前没有任何限定符，这个变量将被分配到寄存器中。但如果寄存器资源不足，编译器会把这些变量存放在local memory中。Local memory中的数据被存放于显存中，而且没有任何缓存可以加速local memory的读写，因此会大大降低程序的速度。
只要编译器能够解析出设备端代码中的指针指向的地址，指向shared memory或者global memory，这样的指针即受支持。如果编译器不能正确地解析指针指向的地址，那么只能使用指向global memory的指针。
在host端代码中使用指向global或者shared memory的指针，或者在device端代码中使用指向host memory的指针都将引起不确定的行为，通常会报分区错误(segmentation fault)并导致程序终止运行。
在device端通过取址符号&获得的__device__、__constant__、__shared__的地址，这样得到的地址只能在device端使用。通过在host端调用cudaGetSymbolAddress()函数可以获得__device__、__constant__的地址，这样得到的地址只能在host端使用。
10.  函数类型限定符
(1)、__global__：表明被修饰的函数在设备上执行，可以从主机端调用；
(2)、__device__：表明被修饰的函数在设备上执行，只能从设备上调用，但只能在其它__device__函数或者__global__函数中调用；
_device_函数是可以为模板函数的
(3)、__host__：在主机端上执行，只能从主机端调用。
没有__host__、__device__、__global__限定符修饰的函数，等同于只用__host__限定符修饰的函数，函数都将仅为主机端进行编译，即编译出只能在主机端运行的版本。__host__可以与__device__一起使用，此时函数将为主机和设备进行编译，即分别编译出在主机和设备端运行的版本。
使用限制：
(1)、__device__和__global__函数不支持递归；
(2)、__device__和__global__函数的函数体内不能声明静态变量；
(3)、__device__和__global__函数的参数数目是不可变化的；
(4)、不能对__device__取指针，但可以对__global__函数取指针；
(5)、__global__与__host__不能连用；
(6)、__global__函数的返回类型必须为void；
(7)、调用__global__函数必须指明其执行配置；
(8)、对__global__函数的调用是异步的，控制权在设备执行完成之前就会返回；
(9)、__global__函数的参数目前通过共享存储器传递（共享内存），总的大小不能超过256Byte。
(10)总的来说， device前缀定义的函数只能在GPU上执行，所以device修饰的函数里面不能调用一般常见的函数；global前缀，CUDA允许能够在CPU，GPU两个设备上运行，但是也不能运行CPU里常见的函数；host前缀修饰的事普通函数，默认缺省，可以调用普通函数。
因此，在出现报错如：“error : calling a __host__ function from a __global__ function is not allowed. ”时候，即为将一个普通的函数错误地添加进入了global前缀定义函数，在CUDA文件.cu文件中是不允许的。

11.  CUDA存储器模型
每一个线程拥有自己的私有存储器寄存器和局部存储器；每一个线程块拥有一块共享存储器(shared memory)；最后,grid中所有的线程都可以访问同一个全局存储器(global memory)。除此以外，还有两种可以被所有线程访问的只读存储器：常数存储器(constant memory)和纹理存储器(texture memory)，它们分别为不同的应用进行了优化。全局存储器、常数存储器和纹理存储器中的值在一个内核函数执行完成后将被继续保持，可以被同一程序中的其他内核函数调用。
八种存储器比较如下图：
 

(1)、寄存器(register)：是GPU片上高速缓存器，执行单元可以以极低的延迟访问寄存器。寄存器的基本单元是寄存器文件(register file)，每个寄存器文件大小为32 bit。
(2)、局部存储器(local memory)：对于每个线程，局部存储器也是私有的。如果寄存器被消耗完，数据将被存储在局部存储器中。如果每个线程使用了过多的寄存器，或声明了大型结构体或数组，或者编译器无法确定数组的大小，线程的私有数据就有可能会被分配到local memory中。一个线程的输入和中间变量将被保存在寄存器或者局部存储器中。局部存储器中的数据被保存在显存中，而不是片上的寄存器或者缓存中，因此对local memory的访问速度很慢。
(3)、共享存储器(shared memory)：也是GPU片内的高速存储器。它是一块可以被同一block种的所有线程访问的可读写存储器。访问共享存储器的速度几乎和访问寄存器一样快，是实现线程间通信的延迟最小的方法。共享存储器可用于实现多种功能，如用于保存共用的计数器或者block的公用结果。
可以将CUDA  C的关键字__shared__添加到变量声明中，这将使这个变量驻留在共享内存中。CUDA C编译器对共享内存中的变量与普通变量将分别采取不同的处理方式。对于GPU上启动的每个线程块，CUDA C编译器都将创建该共享变量的一个副本。线程块中的每个线程都共享这块内存，但线程却无法看到也不能修改其他线程块的变量副本。这样使得一个线程块中的多个线程能够在计算上通信和协作。
(4)、全局存储器(global memory)：__device__关键字定义的变量分配全局存储器。全局存储器位于显存(占据了显存的绝大部分)，CPU、GPU都可以进行读写访问。整个网格中的任意线程都能读写全局存储器的任意位置由于全局存储器是可写的。在目前的架构中，全局存储器没有缓存。
全局存储器能够提供很高带宽，但同时也具有较高的访存延迟。要有效地利用全局存储器带宽，必须遵守和并访问要求，并避免分区冲突。
在运行时API中，显存中的全局存储器也称为线性内存。线性内存通常使用cudaMalloc()函数分配，cudaFree()函数释放，并由cudaMemcpy()【cuMemAllocPitch()也会放到全局内存】进行主机端与设备端的数据传输，这时候我们才把数据放到了全局内存，然后最好是将全局内存中数据加载到寄存器，详见CUDA并行设计P112下。通过CUDA API分配的空间未经过初始化，初始化共享存储器需要调用cudaMemset函数。
此外，也可以使用__device__关键字定义的变量分配全局存储器。这个变量应该在所有函数外定义，必须对使用这个变量的host端和device端函数都可见才能成功编译。在定义__device__变量的同时可以对其赋值。
在驱动API中，线性内存由cuMemAlloc()或来分配，cuMemFree()来释放。
(5)、主机端内存(host memory)：在CUDA中,主机端内存分为两种。可分页内存(pageable memory)和页锁定(page-locked或pinned)内存。可分页内存即为通过操作系统API(malloc(), new())分配的存储器空间；而页锁定内存始终不会被分配到低速的虚拟内存中，能够保证存在于物理内存中，并且能够通过DMA加速与设备端的通信。一般的主机端内存操作方法与其他程序没有任何区别。
(6)、主机端页锁定内存(pinned memory)：它有一个重要的属性，即操作系统将不会对这块内存分页并交换到磁盘上，从而确保了该内存始终驻留在物理内存上。因此，操作系统能够安全地使某个应用程序访问该内存的物理地址，因为这块内存将不会被破坏或者重新定位。它可以提高访问速度，由于GPU知道主机内存的物理地址，因此可以通过”直接内存访问DMA(Direct Memory Access)技术来在GPU和主机之间复制数据。由于DMA在执行复制时无需CPU介入。因此DMA复制过程中使用固定内存是非常重要的。
pinned memory是一把双刃剑。当使用pinned memory时，你将失去虚拟内存的所有功能。特别是，在应用程序中使用每个页锁定内存时都需要分配物理内存，因为这些内存不能交换到磁盘上。这意味着，与使用标准的malloc函数调用相比，系统将更快地耗尽内存。因此，应用程序在物理内存较少的机器上会运行失败，而且意味着应用程序将影响在系统上运行的其它应用程序的性能。建议，仅对cudaMemcpy()调用中的源内存或者目标内存，才使用页锁定内存，并且在不再需要使用它们时立即释放，而不是等到应用程序关闭时才释放。
在运行时API中，通过cudaHostAlloc()和cudaFreeHost()来分配和释放pinned memory。使用pinned memory有很多好处，比如：可以达到更高的主机端----设备端的数据传输带宽，如果页锁定内存以write-combined方式分配，带宽还能更高一些；某些设备支持DMA功能，在执行内核函数的同时利用pinned memory进行主机端与设置端之间的通信；在某些设备上，pinned memory还可以通过zero-copy功能映射到设备地址空间，从GPU直接访问，这样就不用在主存与显存间进行数据拷贝工作了。
虽然pinned memory能带来诸多好处，但它是系统中的一种稀缺资源。如果分配过多，会导致操作系统用于分页的物理内存变小，导致系统整体性能下降。
在驱动API中，pinned memory通过cuMemHostAlloc()和一些标志分配，通过cuMemFreeHost()释放。



Cfloat.h中有double和float的最大最小值的宏定义
Climit.h中有int和char等类型的最大最小值的宏定义

#include <iostream>
#include <climits>
#include <cfloat>

using namespace std;
int main() {
    cout << "int 最大值：" << INT_MAX << '\n';
    cout << "int 最小值：" << INT_MIN << '\n';
    cout << "float 最大值：" << FLT_MAX << '\n';
    cout << "float 最小值：" << FLT_MIN << '\n';
    cout << "double 最大值：" << DBL_MAX << '\n';
    cout << "double 最小值：" << DBL_MIN << '\n';
    cout << "long 最大值：" << LONG_MAX << '\n';
    cout << "long 最小值：" << LONG_MIN << '\n';
    cout << "long long 最大值：" << LONG_LONG_MAX << '\n';
    cout << "long long 最小值：" << LONG_LONG_MIN << '\n';
    cout << "unsigned long long 最大值：" << ULONG_LONG_MAX << '\n';
}




C风格指针初始化，memset
/** 相机结构体 */
	struct Camera
	{
		Camera()
		{
			memset(K, 0, 9 * sizeof(G3Double));
			memset(R, 0, 9 * sizeof(G3Double));
			memset(C, 0, 3 * sizeof(G3Double));
			memset(P, 0, 12 * sizeof(G3Double));
			memset(distortion, 0, 8 * sizeof(G3Double));
			K[0] = K[4] = K[8] = 1.0f;
			R[0] = R[4] = R[8] = 1.0f;
		}

		G3Double K[9];   /**<内参矩阵 3x3（以一维数组的形式） */
		G3Double R[9];   /**<旋转矩阵 3x3（以一维数组的形式） */
		G3Double C[3];   /**<平移矩阵 3x1（以一维数组的形式） */
		G3Double P[12]; /**<P矩阵 3x4（以一维数组的形式） */
		G3Double distortion[8]; /**<畸变系数 k1 ~ k6 p1 ~ p2  */
	};


Memset是对数组进行初始化用的，并不是申请内存，因为数组系统会给内存的，这里只是设定个值而已适用于大型数组的初始化和设零，而且memset只能初始化为0或-1，其他的都不行，会报错。因为：memset是按字节赋值的。 a是int型数组，int占用4个字节 memset(a,1) 就是把int赋值为00000001 00000001 00000001 00000001 十进制就是16843009 
https://blog.csdn.net/qq_42592097/article/details/81947072

