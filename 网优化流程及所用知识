1、加载影像
   1、1 读取影像
   cv::imread(strig imgPath）；
   1、2 RGB2Gray： convertTo与cvtColor函数结合
   cv：：Mat的convertTo函数，参数1为outArray，一般为一个destMat，参数二为结果的DataType，如cv::DataType<float>::type
   g3dImg.pixelMat.convertTo(gray, cv::DataType<float>::type);
   cvtColor(gray, img, cv::COLOR_BGR2GRAY);这个才是rgb2gray函数，上边那个是数据类型转化，将3通道uint转为3通道float
   1、3 多附图合成一幅多通道图cv::merge（）
   cv::Mat grad[G3D_INT2];
   cv::merge(grad, G3D::G3D_INT2, view.imageGrad);
   1.4 索贝尔算子
   cv::Sobel(img, grad[G3D::G3D_INT0], cv::DataType<G3DFloat>::type,
             G3D::G3D_INT1, G3D::G3D_INT0, G3D::G3D_INT3, 1/8);
             
2、预处理
   2、1 计算点面关系
   遍历面，对于面中每个点，看它是否已经存了当前面，没有则把当前面存为临接面
   const auto& vertexArr = base->vertices;
   const auto& faceArr = base->faces;
   vfs.clear();
   vfs.resize(vertexArr.size());

   for (size_t i = 0; i < faceArr.size(); ++i) {
	const auto& face = faceArr[i];
	for (size_t v = 0; v < G3D_INT3; ++v) {
	     auto &fs(vfs[face[v]]);
	     if (std::find(fs.begin(), fs.end(), (G3DIdx)i) != fs.end()) {
		continue;
	     }
	     vfs[face[v]].push_back(static_cast<unsigned int>(i));
	}
   }
   
   2.2 点点关系
   const auto& faceArr = base->faces;
   const auto& vertexArr = base->vertices;
   vvs.clear();
   vvs.resize(vertexArr.size());

   for (size_t i = 0; i < faceArr.size(); ++i) {
	const auto& face = faceArr[i];
	for (int v = 0; v < static_cast<int>(G3D_INT3); ++v) {
		auto& verts(vvs[face[v]]);
		for (int j = 1; j < static_cast<int>(G3D_INT3); ++j) {
			auto idxVert(face[(v + j) % G3D_INT3]);//难点在这句，由当前点在面中的id号去算另外两个，如1号点，要找0、2点
			if (std::find(verts.begin(), verts.end(), (G3DIdx)idxVert) != verts.end()) {
				continue;
			}
			verts.push_back(idxVert);
		}
	}
   }
3、迭代处理
   CPU版本：
   scoreMesh：
     1、多线程projectMesh（）poco多线程和openMp实现多线程操作。
     2、processPair（）
        2.1 匹配代价函数计算相ZNCC
	    是用积分影像，平方和影像做的，是因为代价函数的协方差和方差都可以展开成窗口像素求和或像素平方值求和的形式。
	    
    GPU版本：
    scoreMesh： 
     1、projectMesh（）利用英伟达光线追踪模型，怎么创光线，光线参数是什么。
     2、processPair（）
        2.1 匹配代价函数计算相ZNCC
	    两窗口内像素的协方差/每个窗口内像素的方差的根号，结果即为ZNCC。是用cuda实现的，核函数如何读大于block中线程数的像素？另外那个更快的方法？
	    由ZNCC对物方点求导
	    ZNCC对像素值求导*像素值对像平面x，y坐标求偏导（可由索贝尔算子列出）*像平面坐标对物方点求导。得到的是3维向量---坐标改正量。
	    改正量分配给顶点
	    
	
	   
