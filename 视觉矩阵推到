/**
 *@brief 按公式x=fx*X/Z，y=fx*Y/Z的逆运算计算像点从像平面坐标系到对应物点在相机坐标系下的坐标，要先减去主点偏置x0、y0。
 *将计算所得坐标归一化。
 */
template<class T>
TPoint3<T> PointI2C(const Camera& camera, const TPoint2<T>& ip)
{
	auto& K = camera.K;
	TPoint3<T> res;
	res[0] =  static_cast<T>((ip.x - K[2])   / K[0]);
	res[1] =  static_cast<T>((ip.y - K[5])  / K[4]);
	res[2] = 1;
	return res;
}   这个其实就是共线方程的比例关系式，由x/X=f/Z  y/Y=f/Z,可知，现在输入TPoint2<T>& ipt影像行列号，要求X,Y,Z三个未知数求不出来，但是可以求归一化的坐标
如果要想直到具体的相机坐标系下物方点坐标，要给出具体的Z，下面那个函数就是，输入行列号和物点在相机系下具体的深度Z。

/**
 *@brief 按公式x=fx*X/Z，y=fx*Y/Z的逆运算计算像点从像平面坐标系到对应物点在相机坐标系下的坐标，要先减去主点偏置x0、y0。
 *将计算所得坐标乘以像点深度，不做归一化处理。
 */
template<class T>
TPoint3<T> PointI2C(const Camera& camera, const TPoint3<T>& ip)
{
	auto& K = camera.K;
	TPoint3<T> res;
	res[0] = static_cast<T>((ip.x - K[2]) * ip.z / K[0]);
	res[1] = static_cast<T>((ip.y - K[5]) * ip.z / K[4]);
	res[2] = static_cast<T>(ip.z);
	return res;
}


template<class T>
TPoint3<T> PointC2W(const Camera& camera, const TPoint3<T>& cp)  
{
	auto& R = camera.R;
	auto& C = camera.C;
	TPoint3<T> res = { 0, 0,0 };

	res.x = static_cast<T>(R[0] * cp.x + R[3] * cp.y + R[6] * cp.z + C[0]);
	res.y = static_cast<T>(R[1] * cp.x + R[4] * cp.y + R[7] * cp.z + C[1]);
	res.z = static_cast<T>(R[2] * cp.x + R[5] * cp.y + R[8] * cp.z + C[2]);
	return res;
}
注意旋转矩阵为正交矩阵AAT=E，A的逆=AT（A的转置）
本来由物方点坐标转到相机坐标系坐标公式为：先平移再旋转
Xc R0 R1 R2   (Xw-Xs)
Yc=R3 R4 R5 * (Yw-Ys)    其中Xs为相机摄影中心在世界坐标系下坐标
Zc R6 R7 R8   (Zw-Zs)


https://blog.csdn.net/u013472489/article/details/78736909 摄影测量旋转矩阵知识
https://blog.csdn.net/baidu_38172402/article/details/82501097 摄影测量内外方位元素

已知P矩阵，反解K,R,C矩阵，以及各部分意义，精
https://www.jianshu.com/p/4a73b1c7d4f5?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation
