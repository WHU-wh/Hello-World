https://www.cnblogs.com/luolizhi/p/5746775.html  C++中cin、cin.get()、cin.getline()、getline()、gets()等函数的用法
std::getline()方法是string头文件中的，是属于sstream。

#include <fstream>
//自己写的方法，测过
std::ifstream fin("C:/ptx.txt");
	if (fin.fail()) {
		printf("打开ptx文件失败");
		return 0;
	}

	std::string curStr;
	std::vector<std::string> vec;
	while (std::getline(fin, curStr))
	{
		curStr = curStr + "\\n\"";
		std::cout << "\n" << curStr;
		vec.push_back(curStr);
	}
	fin.close();//用完关闭

	std::ofstream fout("D:/newPtx.txt");
	if (fout.fail()) {
		printf("生成newPtx文件失败");
		return 0;
	}
	for (int i = 0; i < vec.size(); i++)
	{
		fout << vec[i] << std::endl;
	}
	fout.close();
	

各种输出方法总结：
1、单个字符 
   1.1 cin.get（char &）：将读入的字符放在参数 char 中
   返回值是cin对象（cin其实就是istream对象，下面string的getline函数也是返回istream对象)，放在while中会判定为true，当到达文件末尾时，返回值判定为false。
       遍历每行所有字符
        char ch;
	while(cin.get(ch))
	{ //paocess  input  }
   1.2 cin.get（void）：返回值是读入字符对应的ASCII码，读取下一个字符，即使是空格符、换行符也可以读进来，返回其对应ascii（空格是32）。
       所以遍历每行所有字符方法：
        char ch;
	ch = cin.get();
	while(ch != '\n')
	{
		cout << ch ;
		ch=cin.get();
	}
       
   1.3 cin：最基本的，cin>>inchar; 是会过滤掉不可见字符（空格、换行、回车等）。 如输入A BC，那么要cin>>a>>b>>c,会过滤掉A和B中间的空格。
       常用：输入2行数据，第一行表示测试数据个数，第二行表示测试数据（中间用空格隔开），这种用空格或换行回车隔开的数据就用cin读取。
       int numData;
       cin>>numData;
       int arr[5];
       for(int i=0;i<numData;i++){
            cin>>arr[i];   这样就可以读取空格隔开的多个数据
       }
       
2、字符串
   2.1 当不是从文件中读取：如果整行str没有空格，是连续的，可以用cin>>str; 如果又空格就会断掉，如abc def，那么cin只能读到abc  
   2.2 getline：string头文件中的，最好用。参数为（ifstream，string）其中第二个参数存读入的string，可读空格，过滤掉换行符，下次直接从下行读。
       适用于从文件和从cin窗口中读取：
            从文件内读取整行，不管该行有没有空格等符号，直接读到最后的换行符。
	    从控制台窗口内的cin读：getline（cin,string）;可以读整行，和从文件一个效果，会跳过空格，直到换行符。    
	        从控制台内读cin注意问题：getline不能和cin>>连用，只能和getline连用
		string str1,str2;
		cin >> first;
		getline(cin,str1);如果这里输入2回车，那么str1读不到东西，如果输入2 abc回车，那么str1为 abc（abc前边有个空格），说明getline会从
		命令行窗口内输入的第一行找起，并不是输入2回车之后去找第二行。
		
		string str1,str2;
		getline(cin, str2);
		getline(cin,str1);这样才对
*************************************************************************************************************************************
https://blog.csdn.net/qq_37059483/article/details/78608375  C++类成员初始化顺序问题
1、当用初始化列表初始化时，是按成员变量在类中定义的顺序初始化，如
   class A
   {
      public:
         A():n2(0),n1(n2 + 2) {}
	 void print()
         {
         cout << "n1:" << n1 << " ,  n2:" << n2 << endl;
         }
      private:
         int n1;
         int n2;  n1，n2什么时候创建？在创建A对象实例的时候创建，构造函数执行之前就有了。
	 如果类A还有个类B的对象B b;那么用b=new B；吗-->是不用的，系统会调用默认构造函数，创造一个对象，其实上面的int也是个类。
   }   
	 
    那么 A a；会打出n1是随机数，而不是2，n2是0。因为初始化列表初始化对象是按类中定义的顺序来给成员变量赋值。
      
    若将构造函数写成下面则不会错
     A() {
         n2=0；
	 n1=n2 + 2；
     }
    如果不使用初始化列表初始化，在构造函数内初始化时，此时与成员变量在构造函数中的位置有关。
    
3、注意：类成员在定义时，是不能初始化的     因为类只是个抽象，所以不能在类定义中给变量赋值，而且头文件本身不参与编译，cpp中用到了才会复制过来编译
4、注意：类中const成员常量必须在构造函数初始化列表中初始化。 
5、注意：类中static成员变量，必须在类外初始化。 
 *************************************************************************************************************************************
	

C++map用法：
1、map不会存在重复key，map添加新值的方法2种，insert（pair<int,int>）和[ ] ,其中第一种方法不能insert重复的key：
  map<int, int> map1;
  map1.insert(pair<int, int>(3, 4));
  map1.insert(pair<int, int>(3, 5));//3,5加不进去。
  第二种方法比较好，它会检查是否存在这个key，如果不存在则创建这个键值对，值默认为0，所以可以用来计数。
  map<int, int> map1;
  map[3] = 4;//一开始没有3，则创建这个键值对
  map[2]++;//没有2这个键，创建，默认值为0，++变为1。
2、map会自动排序，上例中虽然先加的3,4，但是里边的顺序是<2,1>然后是<3,4>。
3、遍历map：迭代器和for循环冒号用法
  for (auto elem : map1){
      printf("\n%d,%d", elem.first, elem.second);
  }
  
  for (auto iter = map1.begin(); iter != map1.end(); iter++)
  {   //通过（*iter）来获得当前pair
      printf("", (*iter).first, (*iter).second);
  }
  注意：map的[]中括号不是代表第几个pair，是代表key所对应的val，如map的[3]代表key为3对应的val值，所以不能用[]那样遍历，
       所以想输出val直接用map[key].
4、查找和删除
  auto iter = map1.find（key值）;
  if(iter!=map1.end())  //存在则删除
     map1.erase(iter);
     
C++set用法：
vector<int> vec{ 1,2,6,3,5,7,3,4 };
set<int> mySet(vec.begin(), vec.end());
for (auto elem : mySet)
   cout << elem << endl;
//cout按顺序输出1,2,3,4,5,6,7

1、创建并赋值，可用vec的begin和end
2、它默认从小到大排序，且去除重复。

 *************************************************************************************************************************************

解析字符串，得到用逗号分隔的所有字符串，如abc，bcd，ad，ggg注意最后一个字符串后面没有逗号了
1、确定用while循环，for循环也可以，while循环更精简
2、while循环里判断当前符号是不是逗号，不是逗号就获取，逗号就略过。
3、因为最后一个字符串后没有逗号，最好一个字符串要怎么处理

int main()
{
	char ch;
	string input;
	cin >> input;

	vector<string> resVec;
	string curPart="";
	const char * inPtr = input.c_str();
	ch = inPtr[0];
	while (*inPtr != '\0') //字符串结尾这样判断
	{
		ch = *inPtr;
		if (*inPtr == ',') {
			resVec.push_back(curPart);
			curPart = "";
		}
		else {
			curPart += ch;
		}

		inPtr++;
	}
	//最后一个字符串后没有逗号了，不会通过上面的判断到逗号再加进来，
	//此时curPart里存的就是，可以直接加进来。
	resVec.push_back(curPart);

	for (auto elem : resVec) {
		cout << elem << endl;
	}
	return 0;
}

快速排序
https://blog.csdn.net/sty20030818/article/details/81272174#%E5%85%AB%E7%A7%8D%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%8E%92%E5%BA%8F5%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8Fc%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0

void QuickSort(int arr[], int lidx, int ridx)
{
	if (lidx >= ridx)
		return;

	int l = lidx, r = ridx;

	int key = arr[l];
	while (l != r)
	{
		if (arr[l] <= key) {
			l++;
		}

		if (arr[r] >= key) {
			r--;
		}
	}

	QuickSort(arr, lidx, l - 1);
	QuickSort(arr, r + 1, ridx);
}


int main()
{

	return 1;
}

*************************************************************************************************************************************
虚函数和虚函数表

包含虚函数的类才会有虚函数表， 同属于一个类的所有对象共享一张虚函数表， 但它们有各自指向虚函数表的虚指针_vptr，这个_vptr放在对象地址开始的地方
虚函数表实质是一个指针数组，里面存的是虚函数的函数指针。
继承自有虚函数父类的子类也会有虚函数，所以也有了自己的虚函数表。当通过父类指针访问子类函数时，父类指针通过子类的虚指针访问子类虚函数表，从而调用
子类的虚函数。

虚函数表详解：https://blog.csdn.net/primeprime/article/details/80776625
这些函数指针如何组织，见网站：https://www.cnblogs.com/tao-shao/p/7044577.html

3、存在继承关系的虚函数表（不存在覆盖关系时）
 1 #include <iostream>
 2 
 3 class CBassClass {
 4 public:
 5     virtual void FunC1(void) { std::cout << "CBassClass FunC1(void)" << std::endl; }
 6     virtual void FunC2(void) { std::cout << "CBassClass FunC2(void)" << std::endl; }
 7     virtual void FunC3(void) { std::cout << "CBassClass FunC3(void)" << std::endl; }
 8 };
 9 
10 class DClass :public CBassClass {
11 public:
12     virtual void FunC4(void) { std::cout << "DClass FunC4(void)" << std::endl; }
13     virtual void FunC5(void) { std::cout << "DClass FunC5(void)" << std::endl; }
14 };
15 
16 typedef void (*pfnFun) (void);
17 
18 int main(void)
19 {    
20     CBassClass *pBase = new DClass;    // DClass *pBase = new DClass; 结果一样
21 
22     std::cout << "虚函数表地址：0x" << (int *)pBase << std::endl;    // 虚函数表地址存在对象所占内存空间的前4个字节
23     std::cout << "虚函数表中的第一个函数地址：0x" << *((int *)(*(int *)pBase) + 0) << std::endl;
24     std::cout << "虚函数表中的第二个函数地址：0x" << *((int *)(*(int *)pBase) + 1) << std::endl;
25     std::cout << "虚函数表中的第三个函数地址：0x" << *((int *)(*(int *)pBase) + 2) << std::endl;
26     std::cout << "虚函数表中的第四个函数地址：0x" << *((int *)(*(int *)pBase) + 3) << std::endl;
27     std::cout << "虚函数表中的第五个函数地址：0x" << *((int *)(*(int *)pBase) + 4) << std::endl;
28     std::cout << "虚函数表中的结束标志：0x" << *((int *)(*(int *)pBase) + 5) << std::endl;
29 
30     pfnFun fn = NULL;
31     for (int i = 0; i < 5; i++) {
32         fn = (pfnFun)*((int *)(*(int *)pBase) + i);
33         (*fn)();
34     }
35 
36     delete pBase;
37 
38     return 0;
39 }
以上代码运行的结果：

 1 虚函数表地址：0x0052B1C0
 2 虚函数表中的第一个函数地址：0x16520113
 3 虚函数表中的第二个函数地址：0x16520378
 4 虚函数表中的第三个函数地址：0x16520383
 5 虚函数表中的第四个函数地址：0x16520423
 6 虚函数表中的第五个函数地址：0x16520418
 7 虚函数表中的结束标志：0x0
 8 CBassClass FunC1(void)
 9 CBassClass FunC2(void)
10 CBassClass FunC3(void)
11 DClass FunC4(void)
12 DClass FunC5(void)
从上面的结果可以看出来，虚函数表中的函数地址是按顺序存放的，派生类继承了基类的虚函数表，然后又在虚函数表中将自己的虚函数的函数地址存放在虚函数表中，
先存放基类的虚函数后存放派生类的虚函数。


4、存在继承关系的虚函数表（存在覆盖关系时）

 1 #include <iostream>
 2 
 3 class CBassClass {
 4 public:
 5     virtual void FunC1(void) { std::cout << "CBassClass FunC1(void)" << std::endl; }
 6     virtual void FunC2(void) { std::cout << "CBassClass FunC2(void)" << std::endl; }
 7     virtual void FunC3(void) { std::cout << "CBassClass FunC3(void)" << std::endl; }
 8 };
 9 
10 class DClass :public CBassClass {
11 public:
12     virtual void FunC2(void) { std::cout << "DClass FunC2(void)" << std::endl; }
13     virtual void FunC3(void) { std::cout << "DClass FunC3(void)" << std::endl; }
14     virtual void FunC4(void) { std::cout << "DClass FunC4(void)" << std::endl; }
15     virtual void FunC5(void) { std::cout << "DClass FunC5(void)" << std::endl; }
16 };
17 
18 typedef void (*pfnFun) (void);
19 
20 
21 int main(void)
22 {    
23     CBassClass *pBase = new DClass;
24 
25     std::cout << "虚函数表地址：0x" << (int *)pBase << std::endl;    // 虚函数表地址存在对象所占内存空间的前4个字节
26     std::cout << "虚函数表中的第一个函数地址：0x" << *((int *)(*(int *)pBase) + 0) << std::endl;
27     std::cout << "虚函数表中的第二个函数地址：0x" << *((int *)(*(int *)pBase) + 1) << std::endl;
28     std::cout << "虚函数表中的第三个函数地址：0x" << *((int *)(*(int *)pBase) + 2) << std::endl;
29     std::cout << "虚函数表中的第四个函数地址：0x" << *((int *)(*(int *)pBase) + 3) << std::endl;
30     std::cout << "虚函数表中的第五个函数地址：0x" << *((int *)(*(int *)pBase) + 4) << std::endl;
31     std::cout << "虚函数表中的结束标志：0x" << *((int *)(*(int *)pBase) + 5) << std::endl;
32 
33     pfnFun fn = NULL;
34     for (int i = 0; i < 5; i++) {
35         fn = (pfnFun)*((int *)(*(int *)pBase) + i);
36         (*fn)();
37     }
38 
39     delete pBase;
40 
41     return 0;
42 }
以上代码运行的结果是：

 1 虚函数表地址：0x006CB1C0
 2 虚函数表中的第一个函数地址：0x267185
 3 虚函数表中的第一个函数地址：0x267510
 4 虚函数表中的第一个函数地址：0x267505
 5 虚函数表中的第一个函数地址：0x267495
 6 虚函数表中的第一个函数地址：0x267490
 7 CBassClass FunC1(void)
 8 DClass FunC2(void)
 9 DClass FunC3(void)
10 DClass FunC4(void)
11 DClass FunC5(void)
从结果可以看出来，派生类中重写了基类中的两个虚函数，派生类继承了基类的虚函数表之后，将虚函数表中相应的两个函数指针替换成了派生类自己的虚函数。
其他的倒是没什么变化。

就是这种替换，能够使pBase基类指针从虚函数表中访问到子类的虚函数。！！！！！！！！！！！！！！！！！！！

****************************************************************************************************************************************
虚函数与纯虚函数（有纯虚函数的类叫抽象类）
C++纯虚函数
一、定义
　纯虚函数是在基类中声明的虚函数，它在基类中没有定义，但要求任何派生类都要定义自己的实现方法。在基类中实现纯虚函数的方法是在函数原型后加“=0”
　virtual void funtion1()=0
二、引入原因
　　1、为了方便使用多态特性，我们常常需要在基类中定义虚拟函数。
　　2、在很多情况下，基类本身生成对象是不合情理的。例如，动物作为一个基类可以派生出老虎、孔雀等子类，但动物本身生成对象明显不合常理。
　　为了解决上述问题，引入了纯虚函数的概念，将函数定义为纯虚函数（方法：virtual ReturnType Function()= 0;），则编译器要求在派生类中必须予以重写以实现多态性。同时含有纯虚拟函数的类称为抽象类，它不能生成对象。这样就很好地解决了上述两个问题。
声明了纯虚函数的类是一个抽象类。所以，用户不能创建类的实例，只能创建它的派生类的实例。
纯虚函数最显著的特征是：它们必须在继承类中重新声明函数（不要后面的＝0，否则该派生类也不能实例化），而且它们在抽象类中往往没有定义。
定义纯虚函数的目的在于，使派生类仅仅只是继承函数的接口。
纯虚函数的意义，让所有的类对象（主要是派生类对象）都可以执行纯虚函数的动作，但类无法为纯虚函数提供一个合理的缺省实现。所以类纯虚函数的声明就是在告诉子类的设计者，“你必须提供一个纯虚函数的实现，但我不知道你会怎样实现它”。

抽象类的介绍
抽象类是一种特殊的类，它是为了抽象和设计的目的为建立的，它处于继承层次结构的较上层。
（1）抽象类的定义：  称带有纯虚函数的类为抽象类。
（2）抽象类的作用：
抽象类的主要作用是将有关的操作作为结果接口组织在一个继承层次结构中，由它来为派生类提供一个公共的根，派生类将具体实现在其基类中作为接口的操作。所以派生类实际上刻画了一组子类的操作接口的通用语义，这些语义也传给子类，子类可以具体实现这些语义，也可以再将这些语义传给自己的子类。
（3）使用抽象类时注意：
•   抽象类只能作为基类来使用，其纯虚函数的实现由派生类给出。如果派生类中没有重新定义纯虚函数，而只是继承基类的纯虚函数，则这个派生类仍然还是一个抽象类。如果派生类中给出了基类纯虚函数的实现，则该派生类就不再是抽象类了，它是一个可以建立对象的具体的类。
•   抽象类是不能定义对象的。

总结：
1、纯虚函数声明如下： virtual void funtion1()=0; 纯虚函数一定没有定义，纯虚函数用来规范派生类的行为，即接口。包含纯虚函数的类是抽象类，抽象类不能定义实例，但可以声明指向实现该抽象类的具体类的指针或引用。
2、虚函数声明如下：virtual ReturnType FunctionName(Parameter)；虚函数必须实现，如果不实现，编译器将报错，错误提示为：
error LNK****: unresolved external symbol "public: virtual void __thiscall ClassName::virtualFunctionName(void)"
3、对于虚函数来说，父类和子类都有各自的版本。由多态方式调用的时候动态绑定。
4、实现了纯虚函数的子类，该纯虚函数在子类中就编程了虚函数，子类的子类即孙子类可以覆盖该虚函数，由多态方式调用的时候动态绑定。
5、虚函数是C++中用于实现多态(polymorphism)的机制。核心理念就是通过基类访问派生类定义的函数。
6、在有动态分配堆上内存的时候，析构函数必须是虚函数，但没有必要是纯虚的。
7、友元不是成员函数，只有成员函数才可以是虚拟的，因此友元不能是虚拟函数。但可以通过让友元函数调用虚拟成员函数来解决友元的虚拟问题。
8、析构函数应当是虚函数，将调用相应对象类型的析构函数，因此，如果指针指向的是子类对象，将调用子类的析构函数，然后自动调用基类的析构函数。

有纯虚函数的类是抽象类，不能生成对象，只能派生。他派生的类的纯虚函数没有被改写，那么，它的派生类还是个抽象类。
定义纯虚函数就是为了让基类不可实例化化
因为实例化这样的抽象数据结构本身并没有意义。
或者给出实现也没有意义
实际上我个人认为纯虚函数的引入，是出于两个目的
1、为了安全，因为避免任何需要明确但是因为不小心而导致的未知的结果，提醒子类去做应做的实现。
2、为了效率，不是程序执行的效率，而是为了编码的效率。

hash函数和hash树
https://www.cnblogs.com/maybe2030/p/4715035.html#_label6
